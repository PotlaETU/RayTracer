@startuml
class parser.Camera {
- Vector lookFrom
- Vector lookAt
- Vector up
- int fov
+ Vector getLookFrom()
+ Vector getLookAt()
+ Vector getUp()
+ int getFov()
+ void setFov(int)
+ String toString()
}
class parser.scene.Scene {
- Camera camera
- float height
- float width
- List<Light> light
- List<SceneObject> sceneobj
+ Camera getCamera()
+ List<Light> getLight()
+ List<SceneObject> getSceneobj()
+ float getHeight()
+ float getWidth()
}
class triplet.Color {
- Triplet coor
+ Triplet getCoor()
+ void setCoor(Triplet)
+ Color add(Color)
+ Color multiply(double)
+ Color schurProduct(Color)
+ String toString()
}
class parser.objects.Plane {
- Triplet normal
}
class triplet.Point {
- Triplet coor
+ Triplet getCoor()
+ void setCoor(Triplet)
+ Vector sub(Point)
+ Point multiply(double)
+ String toString()
}
class triplet.Triplet {
- double x
- double y
- double z
+ double getX()
+ void setX(double)
+ double getY()
+ void setY(double)
+ double getZ()
+ void setZ(double)
+ Triplet add(Triplet)
+ Triplet sub(Triplet)
+ Triplet multiply(double)
+ double scalarProduct(Triplet)
+ Triplet vectorProduct(Triplet)
+ Triplet schurProduct(Triplet)
+ double length()
+ Triplet normalize()
+ String toString()
}
abstract class parser.light.Light {
- Triplet coordinate
- Color color
+ Triplet getCoordinate()
+ Color getColor()
+ void setCoordinate(Triplet)
+ void setColor(Color)
}
class parser.light.DirectionalLigth {
}
interface parser.scene.Builder {
~ void setCamera(Camera)
~ void setDimensions(float,float)
~ void addLight(Light)
~ void addObject(SceneObject)
~ Scene build()
}
class sae101.Main {
+ {static} void main(String[])
}
class triplet.Vector {
- Triplet coor
+ Triplet getCoor()
+ void setCoor(Triplet)
+ Point add(Point)
+ Vector add(Vector)
+ Vector sub(Vector)
+ Vector multiply(double)
+ double scalarProduct(Vector)
+ Vector vectorProduct(Vector)
+ double length()
+ Vector normalize()
+ String toString()
}
class raytracer.RayTracer {
- Scene scene
- int imgHeight
- int imgWidth
+ void view(String)
}
class parser.light.PointLight {
}
class parser.objects.Sphere {
- double radius
}
abstract class parser.objects.SceneObject {
- Triplet position
- Triplet diffuseColor
- Triplet specularColor
+ Triplet getPosition()
+ Triplet getDiffuseColor()
+ Triplet getSpecularColor()
}
class parser.scene.SceneBuilder {
- Camera camera
- float height
- float width
- List<Light> lights
- List<SceneObject> sceneObjs
+ void setCamera(Camera)
+ void setDimensions(float,float)
+ void addLight(Light)
+ void addObject(SceneObject)
+ Scene build()
}


parser.objects.SceneObject <|-- parser.objects.Plane
parser.light.Light <|-- parser.light.DirectionalLigth
parser.light.Light <|-- parser.light.PointLight
parser.objects.SceneObject <|-- parser.objects.Sphere
parser.scene.Builder <|.. parser.scene.SceneBuilder
@enduml